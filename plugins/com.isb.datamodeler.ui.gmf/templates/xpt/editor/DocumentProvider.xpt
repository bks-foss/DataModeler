/*
 * Copyright (c) 2007, 2010 Borland Software Corporation and others
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«EXTENSION xpt::editor::Utils»

«REM»
	Recuperamos el editingDomain de data modeler para que los diagramas trabajen con él.
«ENDREM»
«DEFINE createEditingDomain FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment('', 'DocumentProvider.xpt')»
private org.eclipse.emf.transaction.TransactionalEditingDomain createEditingDomain() {
	// Recuperamos el editingDomain de data modeler para que los diagramas trabajen con él.
	org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = com.isb.datamodeler.model.core.DataModelerUtils.getDataModelerEditingDomain();
	
	final org.eclipse.emf.transaction.NotificationFilter diagramResourceModifiedFilter = org.eclipse.emf.transaction.NotificationFilter.createNotifierFilter(editingDomain.getResourceSet()).and(org.eclipse.emf.transaction.NotificationFilter.createEventTypeFilter(org.eclipse.emf.common.notify.Notification.ADD)).and(org.eclipse.emf.transaction.NotificationFilter.createFeatureFilter(org.eclipse.emf.ecore.resource.ResourceSet.class, org.eclipse.emf.ecore.resource.ResourceSet.RESOURCE_SET__RESOURCES));
	editingDomain.getResourceSet().eAdapters().add(new org.eclipse.emf.common.notify.Adapter() {

		private org.eclipse.emf.common.notify.Notifier myTarger;

		public org.eclipse.emf.common.notify.Notifier getTarget() {
			return myTarger;
		}

		public boolean isAdapterForType(Object type) {
			return false;
		}

		public void notifyChanged(org.eclipse.emf.common.notify.Notification notification) {
			if (diagramResourceModifiedFilter.matches(notification)) {
				Object value = notification.getNewValue();
				if (value instanceof org.eclipse.emf.ecore.resource.Resource) {
					((org.eclipse.emf.ecore.resource.Resource) value).setTrackingModification(true);
				}
			}
		}

		public void setTarget(org.eclipse.emf.common.notify.Notifier newTarget) {
			myTarger = newTarget;
		}
			
	});	
	
	return editingDomain;
}
«ENDDEFINE»

«REM»
	Como utilizamos el mismo dominio de edición no precisamos hacer un resource.unload()
	Además puede afectar al navegador si intenta refrescarse cuando el Resource se ha descargado.
«ENDREM»
«DEFINE handleElementChanged FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment('', 'DocumentProvider.xpt')»
protected void handleElementChanged(ResourceSetInfo info, org.eclipse.emf.ecore.resource.Resource changedResource, org.eclipse.core.runtime.IProgressMonitor monitor) {
	«IF null = editorGen.application-»
	org.eclipse.core.resources.IFile file = org.eclipse.emf.workspace.util.WorkspaceSynchronizer.getFile(changedResource);
	if (file != null) {
		try {
			file.refreshLocal(org.eclipse.core.resources.IResource.DEPTH_INFINITE, monitor);
		} catch (org.eclipse.core.runtime.CoreException ex) {
			«editorGen.plugin.getActivatorQualifiedClassName()».getInstance().logError(«EXPAND xpt::Externalizer::accessorCall(i18nKeyForDocumentProviderHandleElementContentChanged(self)) FOR editorGen», ex);
			// Error message to log was initially taken from org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.internal.l10n.EditorMessages.FileDocumentProvider_handleElementContentChanged
		}
	}
	«ENDIF-»
	// No necesitamos descargar el recurso porque se usa un único dominio de edición
	// changedResource.unload();
	
	fireElementContentAboutToBeReplaced(info.getEditorInput());
	removeUnchangedElementListeners(info.getEditorInput(), info);
	info.fStatus = null;
	try {
		setDocumentContent(info.fDocument, info.getEditorInput());
	} catch (org.eclipse.core.runtime.CoreException e) {
		info.fStatus = e.getStatus();
	}
«REM»TODO: Remove this if and call setModificationStamp only from doSaveDocument method«ENDREM»«-»
	if (!info.fCanBeSaved) {
		info.setModificationStamp(computeModificationStamp(info));
	}
	addUnchangedElementListeners(info.getEditorInput(), info);
	fireElementContentReplaced(info.getEditorInput());
}
«ENDDEFINE»